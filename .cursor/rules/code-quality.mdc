---
description: "Code Quality, Testing, and Documentation Standards"
globs: ["src/**/*.{ts,tsx}", "backend/**/*.{ts,js}", "**/*.test.{ts,tsx}", "**/*.spec.{ts,tsx}"]
alwaysApply: true
---

# üß™ CODE QUALITY & TESTING RULES

## 6.1 Testing Requirements
‚úÖ **REQUIRED:** Unit tests for all utility functions
‚úÖ **REQUIRED:** Component tests for complex UI logic
‚úÖ **REQUIRED:** Integration tests for critical user flows
‚úÖ **REQUIRED:** End-to-end tests for complete workflows

## 6.2 Code Documentation
‚úÖ **REQUIRED:** JSDoc comments for all public functions
‚úÖ **REQUIRED:** Component prop documentation
‚úÖ **REQUIRED:** Architecture decision records for complex features
‚úÖ **REQUIRED:** README updates with new features

## 6.3 Code Organization
‚úÖ **REQUIRED:** Consistent file naming (kebab-case for files, PascalCase for components)
‚úÖ **REQUIRED:** Proper imports and exports (no circular dependencies)
‚úÖ **REQUIRED:** Error boundaries for component trees
‚úÖ **REQUIRED:** Consistent error handling patterns

## 6.4 Git Workflow
‚úÖ **REQUIRED:** Conventional commit messages (feat:, fix:, docs:, etc.)
‚úÖ **REQUIRED:** Feature branches for new development
‚úÖ **REQUIRED:** Pull request reviews before merging
‚úÖ **REQUIRED:** Database migrations committed with schema changes

## 6.5 Documentation Standards & Master Document System

### 6.5.1 Master Document References
‚úÖ **REQUIRED:** All new documentation must reference the 5 master documents:
   - **README.md** (root) - Project entry point and navigation guide
   - **docs/PROJECT_OVERVIEW.md** - Complete project setup, tech stack, dependencies, deployment procedures
   - **docs/TECHNICAL_ARCHITECTURE.md** - Code organization, quality standards, performance optimization
   - **docs/DESIGN_SYSTEM.md** - UI/UX design system, accessibility compliance, component standards
   - **docs/COMMUNICATION_SYSTEM.md** - Messaging, notifications, WhatsApp integration, admin tools
‚úÖ **REQUIRED:** Update relevant master document when implementing new features
‚úÖ **REQUIRED:** Include bidirectional links between master documents and related code
‚úÖ **REQUIRED:** Add navigation links to master documents in all technical documentation

### 6.5.2 Temporary Documentation Policy
‚úÖ **REQUIRED:** Create only temporary documentation for immediate development needs
‚úÖ **REQUIRED:** All temporary docs must be clearly marked with "TEMPORARY:" prefix in filename
‚úÖ **REQUIRED:** Temporary docs must include consolidation timeline in header comments
‚úÖ **REQUIRED:** Temporary docs must reference which master document they will be consolidated into
‚úÖ **REQUIRED:** Archive temporary docs to `/archive/deprecated-docs/` after consolidation
‚úÖ **REQUIRED:** Maximum 7-day lifecycle for temporary documentation
‚ùå **FORBIDDEN:** Permanent documentation outside of 5 master documents
‚ùå **FORBIDDEN:** Feature-specific documentation without consolidation timeline
‚ùå **FORBIDDEN:** Temporary docs older than 7 days without consolidation plan

### 6.5.3 Documentation Quality Gates
‚úÖ **REQUIRED:** All documentation changes must pass quality checks
‚úÖ **REQUIRED:** Master documents must be updated before feature deployment
‚úÖ **REQUIRED:** Documentation must include code examples and implementation details
‚úÖ **REQUIRED:** All links in documentation must be verified and functional