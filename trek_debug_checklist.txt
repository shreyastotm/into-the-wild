# Trek Delete/Edit Debug Checklist

## 1. Database Table Structure
- [x] trek_events.trek_id is integer PRIMARY KEY
- [x] trek_packing_lists.trek_id is integer, template_id is uuid
- [x] packing_list_templates.template_id is uuid PRIMARY KEY

## 2. Data Consistency
- [ ] All trek_packing_lists.trek_id values refer to valid trek_events.trek_id
- [ ] All trek_packing_lists.template_id values refer to valid packing_list_templates.template_id
- [ ] No orphaned or invalid type values in trek_packing_lists

## 3. Permissions
- [ ] Supabase RLS allows delete/update for current user

## 4. Code
- [x] handleDelete receives id as number, converts with Number(id)
- [x] handleDelete checks Number.isInteger(trekIdNum)
- [x] handleDelete logs type and value
- [x] handleDelete attempts delete on trek_packing_lists and trek_events

## 5. API/Console
- [ ] No errors in browser console for Supabase delete
- [ ] No errors in Supabase logs for delete
- [ ] No 400/403/500 errors on delete

## 6. Next Steps
- [ ] Manually inspect trek_packing_lists and trek_events for data consistency
- [ ] Check RLS and Supabase logs for failed queries
- [ ] Run SQL queries to find orphaned or invalid records

---

## SQL to Find Orphaned/Invalid trek_packing_lists

-- Find trek_packing_lists.trek_id not in trek_events
display orphaned trek_ids:
SELECT trek_id FROM trek_packing_lists WHERE trek_id NOT IN (SELECT trek_id FROM trek_events);

-- Find trek_packing_lists.template_id not in packing_list_templates
display orphaned template_ids:
SELECT template_id FROM trek_packing_lists WHERE template_id NOT IN (SELECT template_id FROM packing_list_templates);

-- Find non-integer trek_id (should never happen with correct schema)
SELECT * FROM trek_packing_lists WHERE trek_id::text ~ '[^0-9]';

---

# Review the above and check Supabase logs for any failed delete/update queries.
