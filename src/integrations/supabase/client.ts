// This file is automatically generated. Do not edit it directly.
import { createClient } from "@supabase/supabase-js";

import type { Database } from "./types";

// Use environment variables for both development and production
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

console.log("[SUPABASE] Initializing with URL:", SUPABASE_URL ? "✓ Set" : "✗ Missing", "Key:", SUPABASE_PUBLISHABLE_KEY ? "✓ Set" : "✗ Missing");

// Validate that required environment variables are present
if (!SUPABASE_URL) {
  throw new Error("Missing VITE_SUPABASE_URL environment variable");
}

if (!SUPABASE_PUBLISHABLE_KEY) {
  throw new Error("Missing VITE_SUPABASE_ANON_KEY environment variable");
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true, // ✅ Enable this for OAuth callbacks
      storage: typeof window !== "undefined" ? window.localStorage : undefined,
      storageKey: "itw-auth-token",
      // Add session timeout - sessions expire after 7 days of inactivity
      sessionTimeout: 7 * 24 * 60 * 60 * 1000, // 7 days in milliseconds
      flowType: 'pkce', // More secure for mobile
    },
    // Removed custom headers that might cause 406 errors
  },
);

console.log("[SUPABASE] Client initialized successfully");

/**
 * Helper type that converts numeric IDs to string in Supabase responses
 * This is useful for fields like user_id that might come as numbers from the database
 * but need to be treated as strings in the application
 */
export type WithStringId<T> = {
  [K in keyof T]: K extends "user_id" | "payer_id" ? string : T[K];
};

/**
 * Converts database record ID fields to strings for frontend usage
 * This ensures consistent type handling across the application
 */
export const convertDbRecordToStringIds = <T extends Record<string, unknown>>(
  record: T,
): WithStringId<T> => {
  const result = { ...record } as WithStringId<T>;

  // Check if properties exist in record before accessing them
  if ("user_id" in record) {
    (result as Record<string, unknown>).user_id = String(record.user_id);
  }

  if ("payer_id" in record) {
    (result as Record<string, unknown>).payer_id = String(record.payer_id);
  }

  return result;
};
