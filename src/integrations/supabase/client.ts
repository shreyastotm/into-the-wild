// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Helper type that converts numeric IDs to string in Supabase responses
 * This is useful for fields like user_id that might come as numbers from the database
 * but need to be treated as strings in the application
 */
export type WithStringId<T> = {
  [K in keyof T]: K extends 'user_id' | 'payer_id' ? string : T[K];
};

/**
 * Converts database record ID fields to strings for frontend usage
 * This ensures consistent type handling across the application
 */
export const convertDbRecordToStringIds = <T extends Record<string, any>>(record: T): WithStringId<T> => {
  const result = { ...record } as WithStringId<T>;
  
  // Check if properties exist in record before accessing them
  if ('user_id' in record) {
    (result as any).user_id = String(record.user_id);
  }
  
  if ('payer_id' in record) {
    (result as any).payer_id = String(record.payer_id);
  }
  
  return result;
};
